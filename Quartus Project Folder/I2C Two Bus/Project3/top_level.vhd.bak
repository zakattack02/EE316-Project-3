library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

entity top_level is
	port(
		iClk   	 : in std_logic;
		Input_Reset : in std_logic;				-- This is basically Key0
		iKey1 : in std_logic;
		iKey2 : in std_logic;
		iKey3 : in std_logic;
	
		TESTINGLED: out std_LOGIC;
		
		I2C_SDA : inout std_LOGIC;
		I2C_SCL : inout std_LOGIC;
		oPwm : out std_LOGIC;
		HEX4OUT : out std_logic_vector(6 downto 0);
		HEX5OUT : out std_logic_vector(6 downto 0);
		
		HEX6OUT : out std_logic_vector(6 downto 0);
		HEX7OUT : out std_logic_vector(6 downto 0)
	);
end top_level;

architecture Structural of top_level is
------------------------------------------------------------------------------------------------------------------
component I2C_user_logic IS
	-- GENERIC (
	-- CONSTANT cntmax : integer := 13021); -- 125MHZ/500kHz  - 1
    Port ( iclk : in STD_LOGIC;
           dataIn : in STD_LOGIC_VECTOR (15 downto 0);
           oSDA : inout STD_LOGIC;
			  oSCL : inout STD_LOGIC
		); 
END component;

------------------------------------------------------------------------------------------------------------------
component Reset_Delay IS
	PORT (
 		SIGNAL iCLK : IN std_logic;
 		SIGNAL oRESET : OUT std_logic
	);
end component;


------------------------------------------------------------------------------------------------------------------
 component SRAM_Controller is
 port(
    clk, reset             : in std_logic; 
    rw                     : in std_logic;
    pulse        			  : in std_logic;
    address_in             : in std_logic_vector(7 downto 0);  --address 8 bit address 
    data_in                : in std_logic_vector(15 downto 0);  -- 8 bit data to be written to sram 
    SRAM_addr              : out std_logic_vector(19 downto 0);  -- sent to sram  
 	 data_out               : out std_logic_vector(15 downto 0);
    we_n 						  : out std_logic;
 	 oe_n                   : out std_logic;  -- sent to sram 
    io                     : inout std_logic_vector(15 downto 0);  -- goes into i/o  
    ce_n                   : out std_logic; -- tied low
    lb_n						  : out std_logic;
 	 ub_n						  : out std_logic 
 ); 
 end component;
 
------------------------------------------------------------------------------------------------------------------
component LCD_user_logic is
GENERIC (
    CONSTANT cnt_max : integer := 24999); 
  PORT(
    clk          : IN     STD_LOGIC;      --system clock
    nreset       : in std_logic;
	 iKey3		  : in std_logic;
	 iPWM_state_value :in integer range 0 to 4;
    stateNumber  : in std_LOGIC_vector(1 downto 0);
	 i16bitData   : in std_LOGIC_VECTOR(15 downto 0);
	 i8bitAddress : in std_LOGIC_VECTOR(7 downto 0);
    oDATA        : out std_logic_vector(7 downto 0);   --(8-bit Data)
    oEN          : out std_logic;  --(1-bit Enable)
    oRS          : out std_logic   --(1-bit Register_Select)    
    );
end component;	
------------------------------------------------------------------------------------------------------------------
component PWM is
   generic(N: integer := 8);--;PWM_counter_max: integer :=256);
   port(
			clk         				: in std_logic;
			datain						: in std_logic_vector(N-1 downto 0);
			BigReset						: in std_logic;
--			address                 : in std_logic_vector(N-1 downto 0); 
			PWMState						: in integer;
			PWM                     : out std_logic
   );
end component;
------------------------------------------------------------------------------------------------------------------
component btn_debounce_toggle is
GENERIC (
	CONSTANT CNTR_MAX : std_logic_vector(15 downto 0) := X"FFFF");  
    Port ( BTN_I 	: in  STD_LOGIC;
           CLK 		: in  STD_LOGIC;
           BTN_O 	: out  STD_LOGIC;
           TOGGLE_O : out  STD_LOGIC;
			  PULSE_O  : out STD_LOGIC);
end component;
------------------------------------------------------------------------------------------------------------------
component counter_pwm is
   generic(N: integer := 5; N2: integer := 32; N1: integer := 0);
   port(
			clk, reset					: in std_logic;
			state                   : in integer;
			syn_clr, load, en, up	: in std_logic;
			clk_en 						: in std_logic := '1';
			d								: in std_logic_vector(N2-1 downto 0);
			q								: out std_logic_vector(7 downto 0)		
   );
end component;
------------------------------------------------------------------------------------------------------------------

	signal Rst 						: std_logic;
	signal Input_ResetDB			: std_LOGIC;
	signal init1_address       : std_logic_vector(7 downto 0);
	signal reset, CounterReset : std_logic;
	
	signal PWM_state_value_out_sig : integer range 0 to 4;
	
	signal rw: std_LOGIC;
	signal clock_en5ms: std_LOGIC;
	signal cnt_5MS : integer range 0 to 249999;
	signal clock_en1s: std_LOGIC;
	signal cnt_1S : integer range 0 to 49999999;
	signal diversifiedClockEn : std_LOGIC;
	signal en: std_LOGIC:= '1';
	signal up: std_LOGIC:= '1';
	signal kp: std_logic;
	signal kpPulse20ns: std_logic;
	signal clock_en60ns: std_LOGIC;
	signal clock_cnt60ns : integer range 0 to 249999;
	
	signal oPwm0 : std_LOGIC;
	signal oPwm1 : std_LOGIC;
	signal oPwm2 : std_LOGIC;

	signal DatA7Seg4,DatA7Seg5 : std_LOGIC_VECTOR(6 downto 0);
	
	signal BIGReset : std_logic;
	signal iKey1_db: std_logic; 
	signal iKey2_db: std_logic;
	signal iKey3_db: std_logic;
	signal iKey3_dbPulse : std_logic;
	
	signal DataPWM0: std_LOGIC_VECTOR(7 downto 0);	--!!
	signal DataPWM1: std_LOGIC_VECTOR(6 downto 0);
	signal DataPWM2: std_LOGIC_VECTOR(5 downto 0);

	signal FourState: STD_LOGIC_VECTOR(1 downto 0);
	
	signal data_out16bit: std_LOGIC_VECTOR(15 downto 0);			-- SRAM
	signal Valid20NSPulse :std_logic;
	signal PRO_DATAIN_20nspulse: std_LOGIC;
	
	signal DiversifiedCOUNTER : std_LOGIC_vector(7 downto 0);
	signal init_address: std_LOGIC_VECTOR(7 downto 0);		-- ADDRESS COMING FROM THE COUNTER TO THE SRAM
	signal init_data: std_LOGIC_VECTOR(15 downto 0); 		-- DATA coming from the ROM
	
	signal I2CandLCDData : std_lOGIC_VECTOR(15 downto 0);
	signal I2CandLCDAddress: std_LOGIC_VECTOR(7 downto 0);
------------------------------------------------------------------------------------------------------------------
begin
kp <= not (iKey3_DB and iKey1_DB and iKey2_DB and Input_ResetDB );
BigReset <= (not Input_ResetDB) and (reset);				--BIG SYSTEM RESET
TESTINGLED <= BigReset;
------------------------------------------------------------------------------------------------------------------
process(iclk,BigReset)
begin
if BigReset = '1' then
	I2CandLCDData 	   <= (others => '0');
	I2CandLCDAddress  <= (others => '0');
elsif rising_edge(iclk) then
	if FourState = "11" then
		I2CandLCDData 	   <= X"0000";
		I2CandLCDAddress  <= DiversifiedCOUNTER;
	else
		I2CandLCDData 	<= data_out16bit;
		I2CandLCDAddress  <= DiversifiedCOUNTER;
	end if;
end if;
end process;

------------------------------------------------------------------------------------------------------------------
process(iClk,BigReset)			-- Simple Clock Enablr running at 5ms for matrix scanning and shift register
begin
	if BigReset = '1' then
		clock_en60ns <= '0';
		clock_cnt60ns <= 0;
		
  	elsif rising_edge(iClk) then
		if clock_cnt60ns = 2 then   
 		  	clock_en60ns <= '1';
		  	clock_cnt60ns <=0;
		else
		  	clock_en60ns <= '0';
		  	clock_cnt60ns <= clock_cnt60ns+1;
		end if;
	end if;
end process;
------------------------------------------------------------------------------------------------------------------
 process(iClk,BigReset)			-- Simple Clock Enablr running at 1Ms for the counter
 begin
 	if BigReset = '1' then
		clock_en1s <= '0';
		cnt_1S <= 0;
		
   elsif rising_edge(iClk) then
 		if cnt_1S = 49999999 then   
  		  	clock_en1s <= '1';
 		  	cnt_1S <=0;
 		else
 		  	clock_en1s <= '0';
 		  	cnt_1S <= cnt_1S+1;
 		end if;
 	end if;
 end process;

------------------------------------------------------------------------------------------------------------------
process(iClk,BigReset)			-- Simple Clock Enablr running at 5ms 
begin	

	if BigReset = '1' then
	clock_en5ms <= '0';
	cnt_5MS <= 0;
	
 	elsif rising_edge(iClk) then
		if cnt_5MS = 249999 then    -- 249999 is 5ms I DID MATH :D 
 		  	clock_en5ms <= '1';
		  	cnt_5MS <=0;
		else
		  	clock_en5ms <= '0';
		  	cnt_5MS <= cnt_5MS+1;
		end if;
	end if;
end process;


------------------------------------------------------------------------------------------------------------------
process (FourState) is 			--- This prints current state of the 4 state machine onto the hexes
begin
	case FourState is
		when "00" => HEX7OUT <= "1000000"; HEX6OUT <= "1000000";diversifiedClockEn <= clock_en60ns; rw <= '0';en <= '1';  DiversifiedCOUNTER <=init_address;
		when "01" => HEX7OUT <= "1000000"; HEX6OUT <= "1111001";diversifiedClockEn <= clock_en1s  ; rw <= '1';en <= '1'; DiversifiedCOUNTER <=init_address;
		when "10" => HEX7OUT <= "1000000"; HEX6OUT <= "0100100";diversifiedClockEn <= clock_en1s  ; rw <= '1';en <= '0'; DiversifiedCOUNTER <=init_address;
		when "11" => HEX7OUT <= "1000000"; HEX6OUT <= "0110000";diversifiedClockEn <= clock_en60ns ; rw <= '1';en <= '0'; DiversifiedCOUNTER <=init1_address;
	end case;
end process;
------------------------------------------------------------------------------------------------------------------
process(iclk,iKey3_dbPulse,FourState,BigReset)
begin 
	if BigReset = '1' then
		PWM_state_value_out_sig <= 0;
	elsif rising_edge(iclk) and iKey3_dbPulse = '1' and FourState = "11" then
		if PWM_state_value_out_sig < 2 then
			PWM_state_value_out_sig <= PWM_state_value_out_sig + 1;
		else
			PWM_state_value_out_sig <= 0;
		end if;
	end if;
end process;
------------------------------------------------------------------------------------------------------------------
process(PWM_state_value_out_sig,fourState)								-- Controlling the PWM 
begin 
if fourState = "11" then
	if PWM_state_value_out_sig = 0 then 				-- 60Hz

	 DataPWM0 <= data_out16bit(15 downto 8);
	 oPwm <= oPwm0;
	 
	elsif PWM_state_value_out_sig = 1 then				-- 120Hz
	 DataPWM1 <= data_out16bit(15 downto 9);
	 oPwm <= oPwm1;

	 
	elsif PWM_state_value_out_sig = 2 then				-- 1k Hz
	 DataPWM2 <= data_out16bit(15 downto 10);
	 	 oPwm <= oPwm2;
	else

	 DataPWM0 <= data_out16bit(15 downto 8);
	 oPwm <= oPwm0;
		end if;
	else
	oPwm <= '0';
end if;
end process;
------------------------------------------------------------------------------------------------------------------
 Inst_SRAM_Controller: SRAM_Controller 
 	port map (
 	clk             => iCLK,
 	reset           => BigReset,
 	address_in      => DiversifiedCOUNTER,    --address_load
 	rw		          => rw,
 	data_in         => init_data,     --data_load
 	pulse           => clock_en5ms,
 	SRAM_addr       => SRAM_Address,
 	data_out        => data_out16bit,     --data_SRAM
 	we_n 		    => SRAM_we_n,
 	oe_n            => SRAM_oe_n,
 	ce_n  	        => SRAM_ce_n,
 	lb_n			=> SRAM_lb_n,
 	ub_n			=> SRAM_ub_n,
 	io              => SRAM_io
 	);
------------------------------------------------------------------------------------------------------------------
InstFourStateMachine: Main4State_Machine
Port map ( clk => iClk, 
		ValidKeyPressedPulse => kpPulse20ns,
		counter => DiversifiedCOUNTER,
		iKey0 => BigReset,    
		iKey1 => iKey1_DB,           
		iKey2 => iKey2_DB,
		iKey3 => iKey3_DB,
		clkEnFiveMS => clock_en5ms,
		state_value_out => FourState
);
------------------------------------------------------------------------------------------------------------------
INST_I2C_UsrLogic: I2C_user_logic
    Port map( iclk => iClk,
           dataIn => I2CandLCDData,
           oSDA => I2C_SDA,
			  oSCL => I2C_SCL
		);  --SPI MOSI data output

------------------------------------------------------------------------------------------------------------------	
Inst_clk_Reset_Delay: Reset_Delay 
	port map(
		iCLK 		 => iCLK,
		oRESET    => reset
	);
------------------------------------------------------------------------------------------------------------------	
 Inst_rom1p: romp
 	port map(
 	address   => init_address,-- 8 bit from counter
 	clock     => iCLK,
 	q         => init_data		-- 16 bit data coming from RAM
 	);
------------------------------------------------------------------------------------------------------------------
 Inst_univ_bin_counter: univ_bin_counter
 	generic map(N => 8, N2=> 255, N1 =>0)
 	port map(
 		clk 			=> iCLK,
 		reset 		=> BigReset,
 		syn_clr		=> '0', 
 		load			=> '0', 
 		en				=> en, --en 
 		up				=> up, --up 
 		clk_en 		=> diversifiedClockEn,
 		d				=> (others => '0'),
 		max_tick		=> open, 
 		min_tick 	=> open,
 		q				=> init_address 
 	);	
------------------------------------------------------------------------------------------------------------------
Inst_LCD_user_logic: LCD_user_logic
    generic map(cnt_max => 208332)  --  208332 to divide 5ms to 3 parts
    port map(
	       clk => iCLK,
	       nreset => kpPulse20ns,
			 iKey3 => iKey3,
	       stateNumber  =>FourState,
			 iPWM_state_value => PWM_state_value_out_sig,
			 i16bitData   => I2CandLCDData,
			 i8bitAddress => I2CandLCDAddress,
	       oDATA => LCD_DATA,
	       oEN => LCD_EN,
	       oRS => LCD_RS          
	   );
------------------------------------------------------------------------------------------------------------------
Inst_RST: btn_debounce_toggle
    GENERIC MAP(CNTR_MAX => X"FFFF")
		Port map (
			BTN_I => Input_Reset,
         	CLK => iCLk,
         	BTN_O => Input_ResetDB,
         	TOGGLE_O => open,
			PULSE_O   => open
		);
------------------------------------------------------------------------------------------------------------------
Inst_Key1: btn_debounce_toggle
GENERIC MAP(CNTR_MAX => X"FFFF")
	Port map (
		BTN_I => Ikey1,
		 CLK => iCLk,
		 BTN_O => iKey1_DB,
		 TOGGLE_O => open,
		PULSE_O   => open
	);
------------------------------------------------------------------------------------------------------------------
Inst_Key2: btn_debounce_toggle
GENERIC MAP(CNTR_MAX => X"FFFF")
	Port map (
		BTN_I => Ikey2,
		 CLK => iCLk,
		 BTN_O => iKey2_DB,
		 TOGGLE_O => open,
		PULSE_O   => open
	);
------------------------------------------------------------------------------------------------------------------
Inst_Key3: btn_debounce_toggle
GENERIC MAP(CNTR_MAX => X"FFFF")
	Port map (
		BTN_I => iKey3,
		CLK => iCLk,
		BTN_O => iKey3_DB,
		TOGGLE_O => open,
		PULSE_O   => open
	);
------------------------------------------------------------------------------------------------------------------
Inst_KP20ns: btn_debounce_toggle				--- This is the 20ns kp clock
GENERIC MAP(CNTR_MAX => X"0001")
	Port map (
		BTN_I => kp,
	  	CLK => clock_en5ms,
	 	BTN_O => open,
	 	TOGGLE_O => open,
		PULSE_O   => kpPulse20ns
	);
------------------------------------------------------------------------------------------------------------------
Inst_Key3P20ns: btn_debounce_toggle				--- This is the 20ns kp clock
GENERIC MAP(CNTR_MAX => X"0001")
	Port map (
		BTN_I => iKey3_DB,
	  	CLK => clock_en5ms,
	 	BTN_O => open,
	 	TOGGLE_O => open,
		PULSE_O   => iKey3_dbPulse
	);
------------------------------------------------------------------------------------------------------------------
INST_4to7Seg4: FourTo7SegLUT						--ADDRESS IN PROGRAM MODE
    port map(
         iFourBitData => DiversifiedCOUNTER(3 downto 0),
         oSevenSegmentData => DatA7Seg4
    );
------------------------------------------------------------------------------------------------------------------
INST_4to7Seg5: FourTo7SegLUT						--ADDRESS IN PROGRAM MODE
    port map(
         iFourBitData => DiversifiedCOUNTER(7 downto 4),
         oSevenSegmentData => DatA7Seg5
    );
------------------------------------------------------------------------------------------------------------------
INST_PWM0: PWM
   generic map(N => 8)--,PWM_counter_max => 256)
   port map(
			clk         				=> iClk,
			datain						=> DataPWM0,
			BigReset						=> BigReset,
			PWMState						=> PWM_state_value_out_sig,
			PWM                     => oPwm0
   );
------------------------------------------------------------------------------------------------------------------

	
INST_PWM1: PWM
generic map(N => 7)--,PWM_counter_max => 128)
   port map(
			clk         				=> iClk,
			datain						=> DataPWM1,
			BigReset						=> BigReset,
			PWMState						=> PWM_state_value_out_sig,
			PWM                     => oPwm1
   );
------------------------------------------------------------------------------------------------------------------
INST_PWM2: PWM
   generic map(N => 6)--,PWM_counter_max=> 64)
   port map(
			clk         				=> iClk,
			datain						=> DataPWM2,
			BigReset						=> BigReset,
			PWMState						=> PWM_state_value_out_sig,
			PWM                     => oPwm2
   );

------------------------------------------------------------------------------------------------------------------
INST_counter_pwm: counter_pwm
  -- generic(N: integer := 5; N2: integer := 32; N1: integer := 0);
   port map(
			clk => iclK,
			reset	=> bigReset,		
			state =>  PWM_state_value_out_sig,            
			syn_clr => '0',
			load => '0',
			en => en,
			up	=> '1',
			clk_en => '1',					
			d		=> (others => '0'),					
			q		=> init1_address					
   );

------------------------------------------------------------------------------------------------------------------


HEX4OUT <= DatA7Seg4;
HEX5OUT <= DatA7Seg5;
end Structural;